<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ColumnHeader_Climb" xml:space="preserve">
    <value>Dénivelé</value>
  </data>
  <data name="ColumnHeader_Code" xml:space="preserve">
    <value>Numéro</value>
  </data>
  <data name="ColumnHeader_Column" xml:space="preserve">
    <value>Colonne</value>
  </data>
  <data name="ColumnHeader_Control" xml:space="preserve">
    <value>Poste</value>
  </data>
  <data name="ColumnHeader_ControlCodes" xml:space="preserve">
    <value>Numéros de poste</value>
  </data>
  <data name="ColumnHeader_Controls" xml:space="preserve">
    <value>Postes</value>
  </data>
  <data name="ColumnHeader_Course" xml:space="preserve">
    <value>Circuit</value>
  </data>
  <data name="ColumnHeader_Courses" xml:space="preserve">
    <value>Circuits</value>
  </data>
  <data name="ColumnHeader_Distance" xml:space="preserve">
    <value>Distance</value>
  </data>
  <data name="ColumnHeader_Item" xml:space="preserve">
    <value>Élément</value>
  </data>
  <data name="ColumnHeader_Leg" xml:space="preserve">
    <value>Interposte</value>
  </data>
  <data name="ColumnHeader_Length" xml:space="preserve">
    <value>Distance</value>
  </data>
  <data name="ColumnHeader_Load" xml:space="preserve">
    <value>Charge</value>
  </data>
  <data name="ColumnHeader_Location" xml:space="preserve">
    <value>Emplacement(s)</value>
  </data>
  <data name="ColumnHeader_NumberOfCourses" xml:space="preserve">
    <value>Nombre de circuits</value>
  </data>
  <data name="ColumnHeader_Reason" xml:space="preserve">
    <value>Motif</value>
  </data>
  <data name="ColumnHeader_SameSymbol" xml:space="preserve">
    <value>Symbole identique ?</value>
  </data>
  <data name="ColumnHeader_Visits" xml:space="preserve">
    <value>Visites</value>
  </data>
  <data name="CourseSummary_Title" xml:space="preserve">
    <value>Synthèse du circuit pour {0}</value>
  </data>
  <data name="CrossRef_Title" xml:space="preserve">
    <value>Contrôle croisé pour {0}</value>
  </data>
  <data name="EventAudit_CloseTogetherControls" xml:space="preserve">
    <value>Postes proches</value>
  </data>
  <data name="EventAudit_CloseTogetherExplanation" xml:space="preserve">
    <value>Le tableau suivant indique toutes les paires de postes qui sont dans un rayon de {0} mètres. La colonne 'Symbole identique ?' précise si les 2 postes possèdent le même symbole de base (colonne D)</value>
  </data>
  <data name="EventAudit_MissingBoxes" xml:space="preserve">
    <value>Cases de définition manquantes</value>
  </data>
  <data name="EventAudit_MissingClimb" xml:space="preserve">
    <value>Les circuits standards devraient indiquer le dénivelé positif</value>
  </data>
  <data name="EventAudit_MissingD" xml:space="preserve">
    <value>Tous les postes doivent posséder un élément principal dans la colonne D</value>
  </data>
  <data name="EventAudit_MissingEBetween" xml:space="preserve">
    <value>Quand "Entre" est inscrit en colonne G, deux éléments doivent apparaître dans les colonnes D et E</value>
  </data>
  <data name="EventAudit_MissingEJunction" xml:space="preserve">
    <value>Quand "jonction" ou "intersection" est inscrit en colonne F, deux éléments doivent apparaître dans les colonnes D et E</value>
  </data>
  <data name="EventAudit_MissingFinish" xml:space="preserve">
    <value>Les circuits standards devraient avoir un cercle d'arrivée</value>
  </data>
  <data name="EventAudit_MissingItems" xml:space="preserve">
    <value>Éléments manquants sur les circuits</value>
  </data>
  <data name="EventAudit_MissingLoad" xml:space="preserve">
    <value>Le circuit devrait indiquer le nombre prévisionnel de concurrents</value>
  </data>
  <data name="EventAudit_MissingPunch" xml:space="preserve">
    <value>Aucun schéma de poinçons n'est défini</value>
  </data>
  <data name="EventAudit_MissingPunchPatterns" xml:space="preserve">
    <value>Schémas de poinçons manquants</value>
  </data>
  <data name="EventAudit_MissingScore" xml:space="preserve">
    <value>Une course au score devrait avoir soit un nombre de points définis pour tous les postes, soit aucun poste</value>
  </data>
  <data name="EventAudit_MissingScores" xml:space="preserve">
    <value>Points manquants</value>
  </data>
  <data name="EventAudit_MissingStart" xml:space="preserve">
    <value>Les circuits standards devraient avoir un triangle de départ</value>
  </data>
  <data name="EventAudit_MissingStartScore" xml:space="preserve">
    <value>Les courses au score devraient avoir un triangle de départ</value>
  </data>
  <data name="EventAudit_No" xml:space="preserve">
    <value>Non</value>
  </data>
  <data name="EventAudit_NoProblems" xml:space="preserve">
    <value>Aucun problème trouvé.</value>
  </data>
  <data name="EventAudit_RepeatedControls" xml:space="preserve">
    <value>Postes répétés</value>
  </data>
  <data name="EventAudit_Title" xml:space="preserve">
    <value>Audit de la course pour {0}</value>
  </data>
  <data name="EventAudit_UnusedControls" xml:space="preserve">
    <value>Postes inutilisés</value>
  </data>
  <data name="EventAudit_UnusedControlsExplanation" xml:space="preserve">
    <value>Les numéros de poste qui suivent sont présents dans la bibliothèque Tous Postes, mais ne sont utilisés sur aucun circuit. Pour les supprimer, utiliser la commande "Supprimer les postes inutilisés" dans le menu "Course". Ces postes ne seront plus pris en considération dans ce rapport.</value>
  </data>
  <data name="EventAudit_Yes" xml:space="preserve">
    <value>Oui</value>
  </data>
  <data name="LegLength_Average" xml:space="preserve">
    <value>Moyenne</value>
  </data>
  <data name="LegLength_CourseInfo" xml:space="preserve">
    <value>{0} ({1} postes, {2}, {3} m de dénivelée)</value>
  </data>
  <data name="LegLength_CourseInfoNoClimb" xml:space="preserve">
    <value>{0} ({1}postes, {2})</value>
  </data>
  <data name="LegLength_Title" xml:space="preserve">
    <value>Longueur des interpostes pour {0}</value>
  </data>
  <data name="Load_ControlLoadSection" xml:space="preserve">
    <value>Nombre de concurrents passant au poste</value>
  </data>
  <data name="Load_LegLoadSection" xml:space="preserve">
    <value>Nombre de concurrents sur l'interposte</value>
  </data>
  <data name="Load_MissingLoads" xml:space="preserve">
    <value>Vous n'avez pas défini le nombre de concurrents pour certains circuits (ou pour tous). Pour cette raison, les charges listées ci-dessous peuvent être absentes ou incorrectes. Pour définir le nombre de concurrents, sélectionner "Nombre de Concurrents" dans le menu "Circuit".</value>
  </data>
  <data name="Load_OnlyLegsMoreThanOnce" xml:space="preserve">
    <value>(seules les interpostes utilisés sur plus d'un circuit apparaissent dans le tableau suivant)</value>
  </data>
  <data name="Load_Title" xml:space="preserve">
    <value>Synthèse du nombre de concurrents pour {0}</value>
  </data>
  <data name="Load_Visit" xml:space="preserve">
    <value>({0} visites)</value>
  </data>
  <data name="Load_Warning" xml:space="preserve">
    <value>ATTENTION :</value>
  </data>
  <data name="Note" xml:space="preserve">
    <value>NOTE : </value>
  </data>
  <data name="RelayVariation_BranchWarning" xml:space="preserve">
    <value>Attention : compte tenu du nombre de circuits de relais précisé, la fourche au poste {0} ne sera pas utilisée de manière équitable.  {1} circuit(s) de relais utilisera(ont) la(les) branche(s) {2}, alors que {3} circuit(s) de relais utilisera(ont) la(les) branche(s) {4}. </value>
  </data>
  <data name="RelayVariation_LegHeader" xml:space="preserve">
    <value>Circuit de relais {0}</value>
  </data>
  <data name="RelayVariation_NoTeams" xml:space="preserve">
    <value>Aucune équipe de relais n'a été définie pour le moment. Sélectionnez le nombre d'équipes et de relayeurs désiré et cliquez sur le bouton "Affecter Variation"</value>
  </data>
  <data name="RelayVariation_TeamNumber" xml:space="preserve">
    <value>Equipe {0}</value>
  </data>
  <data name="RelayVariation_Title" xml:space="preserve">
    <value>Affectation de relais pour {0}</value>
  </data>
</root>