<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultStatus" xml:space="preserve">
    <value>Clic izquierdo: selecciona objeto | Clic derecho: mueve mapa | Rueda ratón: zoom más o menos</value>
  </data>
  <data name="DefaultRectangle" xml:space="preserve">
    <value>Clic izquierdo: mueve o modifica rectángulo | Clic derecho: mueve mapa | Rueda ratón: zoom más o menos</value>
  </data>
  <data name="DragObject" xml:space="preserve">
    <value>Mantén pulsado el botón izquierdo del ratón y suelta para mover el objeto seleccionado</value>
  </data>
  <data name="DragCorner" xml:space="preserve">
    <value>Mantén pulsado el botón izquierdo del ratón y suelta el punto de esquina para moverlo</value>
  </data>
  <data name="DraggingObject" xml:space="preserve">
    <value>Mueve objeto hacia la posición deseada y suelta el botón del ratón</value>
  </data>
  <data name="DraggingCorner" xml:space="preserve">
    <value>Mueve el punto de esquina hacia la posición deseada y suelta el botón del ratón</value>
  </data>
  <data name="AddingControl" xml:space="preserve">
    <value>Clic izquierdo: para situar un nuevo control</value>
  </data>
  <data name="AddingExistingControl" xml:space="preserve">
    <value>Clic izquierdo: para añadir un control existente «{0}» al recorrido</value>
  </data>
  <data name="AddingStart" xml:space="preserve">
    <value>Clic izquierdo: para situar una nueva salida</value>
  </data>
  <data name="AddingExistingStart" xml:space="preserve">
    <value>Clic izquierdo: para añadir un triángulo de salida al recorrido</value>
  </data>
  <data name="AddingFinish" xml:space="preserve">
    <value>Clic izquierdo: para situar un nuevo punto de meta</value>
  </data>
  <data name="AddingExistingFinish" xml:space="preserve">
    <value>Clic izquierdo: para añadir un punto de meta al recorrido</value>
  </data>
  <data name="AddingCrossingPoint" xml:space="preserve">
    <value>Clic izquierdo: para situar un nuevo punto de paso obligatorio</value>
  </data>
  <data name="AddingExistingCrossingPoint" xml:space="preserve">
    <value>Clic izquierdo: para añadir un nuevo punto de paso obligatorio al recorrido</value>
  </data>
  <data name="AddingObject" xml:space="preserve">
    <value>Clic izquierdo: para situar un nuevo elemento</value>
  </data>
  <data name="AddingBend" xml:space="preserve">
    <value>Clic izquierdo: para indicar la posición del ángulo</value>
  </data>
  <data name="AddingCorner" xml:space="preserve">
    <value>Clic izquierdo: para añadir una nueva esquina</value>
  </data>
  <data name="DeletingBend" xml:space="preserve">
    <value>Clic izquierdo: sobre un ángulo para quitarlo</value>
  </data>
  <data name="DeletingCorner" xml:space="preserve">
    <value>Clic izquierdo: sobre una esquina para quitarla</value>
  </data>
  <data name="AddingControlGap" xml:space="preserve">
    <value>Clic izquierdo: sobre el círculo de control para añadir un pequeño recorte; pulse y arrastre para crear un recorte grande.</value>
  </data>
  <data name="RemovingControlGap" xml:space="preserve">
    <value>Clic izquierdo: sobre el hueco del circulo para eliminarlo</value>
  </data>
  <data name="AddingLegGap" xml:space="preserve">
    <value>Clic izquierdo: crea un pequeño hueco; pulse y arrastre para crear un recorte grande en el tramo.</value>
  </data>
  <data name="RemovingLegGap" xml:space="preserve">
    <value>Clic Izquierdo: sobre el hueco en la línea para eliminarlo</value>
  </data>
  <data name="SizeRectangle" xml:space="preserve">
    <value>Mantén pulsado el botón izquierdo y suéltalo para definir el tamaño del objeto seleccionado</value>
  </data>
  <data name="SizingRectangle" xml:space="preserve">
    <value>Mueve esquina(s) hacia la posición deseada y suelta el botón del ratón</value>
  </data>
  <data name="AddingDescription" xml:space="preserve">
    <value>Mantén pulsado el botón izquierdo y suéltalo para crear la descripción de controles</value>
  </data>
  <data name="RotatingObject" xml:space="preserve">
    <value>Clic izquierdo: cuando el punto de paso tenga la orientación correcta</value>
  </data>
  <data name="AddingLineArea" xml:space="preserve">
    <value>Mantén pulsado el botón izquierdo y arrástralo para añadir un segmento |Clic izquierdo: para dejar de añadir objetos.</value>
  </data>
  <data name="AddingText" xml:space="preserve">
    <value>Mantén pulsado el botón izquierdo y suéltalo para crear un texto</value>
  </data>
  <data name="AddingExistingMapExchange" xml:space="preserve">
    <value>Clic izquierdo: añade un cambio de mapa al recorrido</value>
  </data>
  <data name="AddingMapExchange" xml:space="preserve">
    <value>Clic izquierdo: sitúa el nuevo cambio de mapa</value>
  </data>
  <data name="AddingMapExchangeToControl" xml:space="preserve">
    <value>Clic izquierdo: añade cambio de mapa en el control «{0}» </value>
  </data>
  <data name="AddingRectangle" xml:space="preserve">
    <value>Mantén pulsado el botón izquierdo y suéltalo para crear un objeto</value>
  </data>
  <data name="DraggingTopologyObject" xml:space="preserve">
    <value>Arrastre el número del control para reordenarlo en el recorrido (con mayúscula para duplicarlo)</value>
  </data>
  <data name="AddingExistingMapIssue" xml:space="preserve">
    <value>Clic izquierdo: añade al recorrido un punto de entrega de mapas ya existente.</value>
  </data>
  <data name="AddingMapIssue" xml:space="preserve">
    <value>Pulse el botón izquierdo del ratón para situar un nuevo punto de entrega de mapas</value>
  </data>
</root>