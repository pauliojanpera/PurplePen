<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultStatus" xml:space="preserve">
    <value>Bouton gauche de la souris : sélectionner un objet ; Bouton droit : déplacer la carte ; Molette : zoom + / -</value>
  </data>
  <data name="DefaultRectangle" xml:space="preserve">
    <value>Bouton gauche de la souris : déplacer / redimensionner le rectangle ; Bouton droit : déplacer la carte ; Molette : zoom + / -</value>
  </data>
  <data name="DragObject" xml:space="preserve">
    <value>Appuyer sur le bouton gauche de votre souris et glisser pour déplacer l'objet sélectionné</value>
  </data>
  <data name="DragCorner" xml:space="preserve">
    <value>Appuyer sur le bouton gauche de votre souris et glisser le point de coin pour le déplacer</value>
  </data>
  <data name="DraggingObject" xml:space="preserve">
    <value>Déplacer l'objet à l'emplacement désiré et relâcher le bouton de votre souris</value>
  </data>
  <data name="DraggingCorner" xml:space="preserve">
    <value>Déplacer le point de coin à l'emplacement désiré et relâcher le bouton de votre souris</value>
  </data>
  <data name="AddingControl" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour placer un nouveau poste</value>
  </data>
  <data name="AddingExistingControl" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour ajouter le poste existant n° "{0}" au circuit</value>
  </data>
  <data name="AddingStart" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour placer un nouveau Départ</value>
  </data>
  <data name="AddingExistingStart" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour ajouter un Départ existant au circuit</value>
  </data>
  <data name="AddingFinish" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour placer une nouvelle Arrivée</value>
  </data>
  <data name="AddingExistingFinish" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour ajouter une Arrivée existante au circuit</value>
  </data>
  <data name="AddingCrossingPoint" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour placer un nouveau point de passage obligatoire</value>
  </data>
  <data name="AddingExistingCrossingPoint" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour ajouter au circuit un point de passage obligatoire existant</value>
  </data>
  <data name="AddingObject" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris pour placer le nouvel objet</value>
  </data>
  <data name="AddingBend" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de votre souris à l'emplacement du coude</value>
  </data>
  <data name="AddingCorner" xml:space="preserve">
    <value>Cliquer le bouton gauche de votre souris pour insérer un nouveau coin</value>
  </data>
  <data name="DeletingBend" xml:space="preserve">
    <value>Cliquer avec le bouton gauche de votre souris sur un coude pour le supprimer</value>
  </data>
  <data name="DeletingCorner" xml:space="preserve">
    <value>Cliquer avec le bouton gauche de votre souris sur un coin pour le supprimer</value>
  </data>
  <data name="AddingControlGap" xml:space="preserve">
    <value>Cliquer avec le bouton gauche de votre souris sur le cercle du poste afin d'ajouter un petit intervalle ; garder le bouton appuyé et déplacer la souris pour créer un intervalle plus important</value>
  </data>
  <data name="RemovingControlGap" xml:space="preserve">
    <value>Cliquer avec le bouton gauche de votre souris sur l'intervalle existant dans le cercle du poste pour le supprimer</value>
  </data>
  <data name="AddingLegGap" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de la souris afin de créer un petit intervalle ; garder le bouton appuyé et déplacer la souris pour créer un intervalle plus important dans l'interposte</value>
  </data>
  <data name="RemovingLegGap" xml:space="preserve">
    <value>Cliquer avec le bouton gauche de votre souris sur l'intervalle d'un interposte pour le supprimer</value>
  </data>
  <data name="SizeRectangle" xml:space="preserve">
    <value>Appuyer sur le bouton gauche de votre souris et glisser pour redimensionner l'objet sélectionné</value>
  </data>
  <data name="SizingRectangle" xml:space="preserve">
    <value>Déplacer le(s) bord(s) à l'emplacement désiré et relâcher le bouton de votre souris</value>
  </data>
  <data name="AddingDescription" xml:space="preserve">
    <value>Appuyer sur le bouton gauche de votre souris et glisser pour créer des définitions de poste</value>
  </data>
  <data name="RotatingObject" xml:space="preserve">
    <value>Cliquer le bouton gauche de votre souris une fois que le point de passage a été orienté dans la bonne direction</value>
  </data>
  <data name="AddingLineArea" xml:space="preserve">
    <value>Appuyer sur le bouton gauche de votre souris et glisser pour ajouter un segment de ligne ; cliquer sur le bouton gauche pour terminer l'ajout d'un objet</value>
  </data>
  <data name="AddingText" xml:space="preserve">
    <value>Appuyer sur le bouton gauche de votre souris et glisser pour créer le texte</value>
  </data>
  <data name="AddingExistingMapExchange" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de la souris pour ajouter un échange de carte existant au circuit</value>
  </data>
  <data name="AddingMapExchange" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de la souris pour positionner un nouvel échange de carte</value>
  </data>
  <data name="AddingMapExchangeToControl" xml:space="preserve">
    <value>Cliquer sur le bouton gauche de la souris pour ajouter un échange de carte au poste "{0}" </value>
  </data>
  <data name="AddingRectangle" xml:space="preserve">
    <value>Appuyez sur le bouton principal de votre souris et glissez-la afin de créer l'objet</value>
  </data>
</root>