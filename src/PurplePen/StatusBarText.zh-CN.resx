<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultStatus" xml:space="preserve">
    <value>鼠标左键：选择对象；鼠标右键：移动地图；滚轮：放大/缩小</value>
  </data>
  <data name="DefaultRectangle" xml:space="preserve">
    <value>鼠标左键：移动/大小的矩形；鼠标右键：移动地图；滚轮：放大/缩小</value>
  </data>
  <data name="DragObject" xml:space="preserve">
    <value>按住鼠标左键，拖动选定对象</value>
  </data>
  <data name="DragCorner" xml:space="preserve">
    <value>按住鼠标左键并拖动角点来移动它</value>
  </data>
  <data name="DraggingObject" xml:space="preserve">
    <value>移动对象到所需的位置，释放鼠标按钮</value>
  </data>
  <data name="DraggingCorner" xml:space="preserve">
    <value>移动角点所需的位置，释放鼠标按钮</value>
  </data>
  <data name="AddingControl" xml:space="preserve">
    <value>点击鼠标左键放置新的检查点</value>
  </data>
  <data name="AddingExistingControl" xml:space="preserve">
    <value>单击鼠标左键将现有检查点{0}添加到线路</value>
  </data>
  <data name="AddingStart" xml:space="preserve">
    <value>点击鼠标左键放置新的开始</value>
  </data>
  <data name="AddingExistingStart" xml:space="preserve">
    <value>单击鼠标左键将现有的起点添加到线路</value>
  </data>
  <data name="AddingFinish" xml:space="preserve">
    <value>点击鼠标左键放置新的完成</value>
  </data>
  <data name="AddingExistingFinish" xml:space="preserve">
    <value>单击鼠标左键将现有的“终点”添加到线路中</value>
  </data>
  <data name="AddingCrossingPoint" xml:space="preserve">
    <value>点击鼠标左键放置新的必经通过点</value>
  </data>
  <data name="AddingExistingCrossingPoint" xml:space="preserve">
    <value>单击鼠标左键将现有的必经通过点添加到线路</value>
  </data>
  <data name="AddingObject" xml:space="preserve">
    <value>点击鼠标左键放置新的对象</value>
  </data>
  <data name="AddingBend" xml:space="preserve">
    <value>点击鼠标左键在弯曲的位置</value>
  </data>
  <data name="AddingCorner" xml:space="preserve">
    <value>单击鼠标左键添加一个新的角落</value>
  </data>
  <data name="DeletingBend" xml:space="preserve">
    <value>点击鼠标左键在一个弯曲的删除它</value>
  </data>
  <data name="DeletingCorner" xml:space="preserve">
    <value>点击鼠标左键在一个角落里删除它</value>
  </data>
  <data name="AddingControlGap" xml:space="preserve">
    <value>在检查点圆圈上单击鼠标左键以添加一个小间隙；按住鼠标左键并拖动以创建一个大间隙</value>
  </data>
  <data name="RemovingControlGap" xml:space="preserve">
    <value>在检查点圆圈的间隙上单击鼠标左键将其删除</value>
  </data>
  <data name="AddingLegGap" xml:space="preserve">
    <value>点击鼠标左键创建小间隙；按住鼠标左键并拖动创建腿的一个大的差距</value>
  </data>
  <data name="RemovingLegGap" xml:space="preserve">
    <value>点击腿的一个缺口将鼠标左键</value>
  </data>
  <data name="SizeRectangle" xml:space="preserve">
    <value>按住鼠标左键，拖动尺寸选定对象</value>
  </data>
  <data name="SizingRectangle" xml:space="preserve">
    <value>移动边缘（S）到所需的位置，释放鼠标按钮</value>
  </data>
  <data name="AddingDescription" xml:space="preserve">
    <value>按住鼠标左键并拖动以创建检查点说明表</value>
  </data>
  <data name="RotatingObject" xml:space="preserve">
    <value>点击鼠标左键时，通过点旋转到正确的角度</value>
  </data>
  <data name="AddingLineArea" xml:space="preserve">
    <value>按住鼠标左键并拖动添加线段；点击鼠标左键完成添加对象</value>
  </data>
  <data name="AddingText" xml:space="preserve">
    <value>按住鼠标左键并拖动创建文本</value>
  </data>
  <data name="AddingExistingMapExchange" xml:space="preserve">
    <value>单击鼠标左键将现有换图添加到线路</value>
  </data>
  <data name="AddingMapExchange" xml:space="preserve">
    <value>点击鼠标左键放置新的换图</value>
  </data>
  <data name="AddingMapExchangeToControl" xml:space="preserve">
    <value>单击鼠标左键在检查“{0}”处添加换图 </value>
  </data>
  <data name="AddingRectangle" xml:space="preserve">
    <value>按住鼠标左键并拖动创建对象</value>
  </data>
  <data name="DraggingTopologyObject" xml:space="preserve">
    <value>拖动检查点编号可在线路中对其重新排序（按住shift键可复制）</value>
  </data>
  <data name="AddingExistingMapIssue" xml:space="preserve">
    <value>单击鼠标左键将现有地图关键点添加到线路</value>
  </data>
  <data name="AddingMapIssue" xml:space="preserve">
    <value>单击鼠标左键以放置新的地图关键点</value>
  </data>
  <data name="StretchingObject" xml:space="preserve">
    <value>在交点按住鼠标左键并拖动拉伸</value>
  </data>
  <data name="ControlForMoveAllControls" xml:space="preserve">
    <value>在检查点或者标记处按住鼠标左键，移动到新位置</value>
  </data>
  <data name="NewLocationForMoveAllControls" xml:space="preserve">
    <value>在检查点或者标记的新位置，点击鼠标左键</value>
  </data>
</root>